"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""" VIM Option """""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://learnvimscriptthehardway.stevelosh.com
"
set nocompatible        " READ THE DOCS. Plugins often depend on this 

" Load any vim files located in '~/.vim/custom/'
" This includes our Plugins, Remaps, and whatever
let customdir='~/.vim/custom/'
function LoadCustom()
    let customfiles=split(globpath(expand(g:customdir),'*.vim'), '\n')
    for cf in customfiles
        if filereadable(expand(cf))
            execute 'source ' . cf
        else
            echom "Wasn't able to read " .. cf
        endif
    endfor
endfunction
" Keep loads above this so they don't mess with these settings
call LoadCustom()

" These settings will override those from above!
syntax on               " Turns on Syntax highlighting 
try
    "colorscheme vividchalk   " Colour Scheme (in ~/.vim/colors)
    colorscheme spaceduck " Colour Scheme (in ~/.vim/colors)
catch
    colorscheme peachpuff   " Backup colour scheme (in /usr/share/vim...)
endtry
" Transparency
"hi Normal guibg=NONE ctermbg=None
set mouse=a             " For people that can't use vim
set path+=**            " Recursive path lookup

set t_Co=256            " Want 256 colors
set lazyredraw          " Faster rendering

" Should redo this rule for specific filetypes and just use smartindent
set cindent             " Uses C indenting rules ({,},),],:,#,^F,o,O,e)
set cinkeys-=0#         " No indenting on # mark 
"set indentkeys-=0#
let &showbreak="||| "    " Prepends a wrapped line with this symbol
set expandtab           " Replaces tabs with spaces
set shiftwidth=4        " Tab width 
set softtabstop=4       " Number of spaces to consider when <Tab> is in a cmd

"Backspace works through indents, end of line, etc
" Isn't this default?
"set backspace=indent,eol,start  
set backspace=2 " Same as above

set number "ruler        "Show line number

set scrolloff=5         " Keep at lease 5 lines above and below
set colorcolumn=81      " Vertical white bar at 80 chars
set tw=80               " Line wrapping
" use `gq` to wrap selected text and `gqG` to wrap text till end of file
" all ranges work like normal. `gqip` wraps current paragraph

" Error bells.  All are off
set noerrorbells        " Removes error bells
set novisualbell        " Removes visual bells
set t_vb=               " Sets visual bell

" Searching
"set incsearch           " Search command while typing
"set hlsearch            " Highlights all misspelled words
set showmatch           " Shows matching brackets
nnoremap <silent> <Space> :silent noh<Bar>echo<CR>
set ignorecase          " Ignore case. Same as /csearchterm
set smartcase           " Override ignorecase if upper case used in search
" Completion 
" Default completeopt=menu,popup
"   menuone: popup even with one match
"   preview: show extra info in preview menu
"   fuzzy:   enable fuzzy matching (see :h fuzzy-matching)
set completeopt=menuone,popup,preview,fuzzy

" Splitting
set splitright          " Puts new window to right of current (vsplit)
set splitbelow          " Same but below (split)

" Folding:  Press zf to fold highlighted text (zfap for paragraph) 
"set foldmethod=indent   " We use python and markdown a lot
"set foldcolumn=2        " Shows fold info on left
"set foldlevel=4         " Should match shiftwidth

" Spell checking
" Was used because frazrepo/vim-rainbow messed up LaTeX spell checking. But this
" actually didn't always fix the line. Switching to luochen1990/rainbow fixes
" the issue.
"syntax spell toplevel   " Always spell check
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>
set spell spelllang=en_us     " Sets spell language to specifically US
"hi clear SpellBad             " Highlights misspelled words
"hi SpellBad cterm=underline,bold ctermfg=white "Makes misspelled words highlited, bold, and underline white

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Turn persistent undo on
" means that you can undo even when you close a buffer/VIM
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
try
    set undofile
    set undodir=~/.vim/undodir
catch
endtry

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" THIS SHOULD BE DONE LAST AS LOCAL SETTINGS SHOULD OVERRIDE
" GLOBAL ONES.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Load Local Configs if Exist
" These settings will be loaded in addition to those of this
" file. This allows you to set or override the main config.
" Useful for specifying project formatting or adapting to 
" the needs of a particular project
" Preferentially, when setting a local settings you should use 
" .exrc
" With this command you do not need to reload this source.
"
" e.g. in a latex project you may wish to ignore pdf files
"   from netrw. This can be done by using this line in .exrc
"   let g:netrw_hide_list=netrw_hide_list .. ',.*\.pdf$'
"   (Note the leading comma)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function LoadLocalConfig()
    " List of potential names for local vim config
    let possible_local_files = ['.exrc', '.vim.local', '.nvim.local'] 
    for lf in possible_local_files
        if filereadable(lf)
            execute 'source ' . lf
            echom "Loaded local settings from " .. lf
        endif
    endfor
    " Don't double load main vimrc but allow '.vimrc' in local dir
    if filereadable('.vimrc') && getcwd() != getenv('HOME')
        execute 'source .vimrc'
        echom "Loaded local .vimrc"
    endif
endfunction
call LoadLocalConfig()
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" END OF FILE
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
