#!/usr/bin/env bash
################################################################################
# Author: Steven Walton
# Contact: dotfiles@walton.mozmail.com
# LICENSE: MIT
#
# This file is intended to autogenerate a README.md file and save us some time
# while allowing us to stay organized ^__^
# Most importantly, we create a table of contents within the README file.
# Why do we want a TOC?
#   - Good readability on GitHub
#   - Get a 'vimwiki' for 'free'
# We generate the README file in the following way:
# - First, dump the contents of `make_header` which should also contain the TOC
# - Then we add some useful docs (or other functions we want)
# - Finish by adding the `make_footer` function
# These should be defined by using the 
# ```bash
# cat << EOF 
# ...
# EOF
# ```
# pattern. Note that this maintains your formatting, so pay attention. The
# indenting is purposeful
#
# The TOC generation can be tricky.
# It was inspired by [jonavon's SO post](https://stackoverflow.com/a/61565622)
# but we're giving it steroids.
# His `git ls-tree` solution only adds committed files. This might be the
# solution for some cases, but in a notes folder we always want to commit.
# Instead we'll use `find` as this is much easier to work with, parse, and so
# on. Check earlier versions of this file to see all the `sed` magic.
# GitHub is also annoying in rendering so we'll use HTML styling and strike a
# balance between what looks nice in the terminal and on the webpage.
# We grab all ".md" files except the README and put them in a list, with links.
# Optionally, add and export a function with the filename_comment (see examples
# below) to add a comment to the list item. 
################################################################################

# Expected root locations
#declare DOTFILE_DIR="${DOTFILE_DIR:-${HOME%/}/.dotfiles}"
#declare README_DIR="${README_DIR:-Notes}"
declare README_DIR="${OUTPUT_DIR:-$(dirname "${BASH_SOURCE[0]}")}"
declare OUTFILE="${OUTFILE:-"${README_DIR%/}/README.md"}"

make_header() {
    cat << HEADEREOF 
# Dotfiles Notes
----------------
The project is organized as follows

------------------------------------------------------------
<ul>
$(make_toc)
</ul>
------------------------------------------------------------
HEADEREOF
}

# Leave a space at top intentionally
make_footer() {
    cat << FOOTER_EOF

<sub><sup>Note: In vim press \`gf\` (goto-file) to go to selected file and <C-o> or <C-^> to go back (:e#)</sub></sup>

<sub><sup>This README is autogenerated by [generate_README.sh](/Notes/generate_README.sh). Do not edit README directly, but instead the generator file</sub><sup>
FOOTER_EOF
}

# Seriously, actually record these somewhere...
useful_docs() {
    cat << UDEOF

Here's some useful docs:

***[0cjs's System Engineering Notes](https://github.com/0cjs/sedoc/tree/master):***

Has some nice info on a bunch of stuff. It is simple, but quite extensive!
UDEOF
}

# ==============================================================================
#                       TOC GENERATION
# ------------------------------------------------------------------------------
toc_helper() {
    COMMENT=""
    # Check if we have a comment command defined
    if [[ $(command -v "${1%%.*}_comment") ]];
    then
        COMMENT="$(echo -e ":\n\t\t\t $(eval "${1%%.*}_comment")")"
    fi
    # Single line version
    #echo "   <li><a href=\"${1}\">${1}</a>: ${COMMENT}</li>"
    # Easier to read the file in terminal
    cat << TOCHEOF
    <li>
        <a href="${1}">${1}</a>${COMMENT}
    </li>
TOCHEOF
}
# Export this so we can use in the make_toc function
export -f toc_helper

# Yeah, that's right, I use xargs
# Can't do `find` with `-exec` because we want to sort before generating
make_toc() {
    # Find the md files that aren't called "README"
    # and put them into an HTML list format
    # <ul> and </ul> are located above
    find "${DOTFILE_DIR%/}/${README_DIR%/}" \
            -type f \
            ! -name "README.md" \
            -name "*.md" \
            | sort \
            | xargs -n1 bash -c \
                'echo "$(toc_helper "${0##*/}")"'
}

# ==============================================================================
#                       Comments for individual files
# ------------------------------------------------------------------------------
#  Give short descriptions for what is inside each of the associated files. 
#  These __must__ be named the same as the markdown filename, stripped of the 
#  extension and then '_comment' for everything to work as expected. 
#  You __must__ also run `export -f foo_comment` if you want them to be added, 
#  otherwise the `toc_helper` command will not know that these exist.
#  We'll take care of that with the export_comments helper though ;)
# ------------------------------------------------------------------------------
# Helper function to export all comment functions within this file
# ruff will give warnings about not exporting and a useless cat, ignore them,
# this works
export_comments() {
    while read -r comment_fn
    do
        export -f "${comment_fn}"
    done < <(cat "${0}" \
                | grep -e "^[a-zA-Z].*_comment() {" \
                | sed -e 's/\(.*_comment\).*/\1/g')
}

bashing_around_comment() {
	echo "Notes about bash/zsh commands and scripting."
}

data_recovery_comment() {
	echo "I'll update this on those rare occasions I have to do data recovery because I'm an idiot that \`rm -rf\`'d the wrong dir and my aliases didn't work or aren't used"
}

ffmpeg_comment() {
	echo "Can anyone remember ffmpeg?"
}

fun_comment() {
    echo "Random fun stuff like Star Wars in the cli"
}

git_comment() {
    echo "Some helpful git information, such as decreasing repo size"
}

linux_comment() {
	echo "Notes about the linux operating system. Things like systemd, cuda drivers, and all that fun stuff"
}

networking_comment() {
	echo "Some stuff on network commands. Like how to debug, fail2ban, etc"
}

nvidia_comment() {
	echo "Notes about dealing with nvidia drivers on linux.  Some stuff may also be in the linux notes, so check both."
}

osx_comment() {
	echo "Don't let Apple stop you from being a power user!"
}

phones_comment() {
    echo "Note about things to do with phones. Recycle them, make servers, scripting (Android and iPhone)"
}

python_comment() {
	echo "Mostly empty but maybe some things I forget about ipython configs, envs, or some command/trick I want to remember"
}

random_commands_comment() {
    echo "Some random commands to remember that don't cleanly fit elsewhere"
}

research_tricks_comment() {
    echo "Small tricks that make life a little easier"
}

systemd_comment() {
    echo "Systemd can be touch to learn"
}

tailscale_comment() {
    echo "Tailscale is actually useful and fun"
}

thunderbird_comment() {
    echo "Even your email needs configuration. Apple, why no filters?!"
}

vim_comment() {
    echo "Actually write down those cool vim commands so you can remember them next time -__-"
}


# ==============================================================================
#                                       MAIN
# ------------------------------------------------------------------------------
get_args() {
    while [[ $# -gt 0 ]];
    do
        case "$1" in 
            # Preview option so we don't overwrite our existing README
            --preview)
                OUTFILE="/dev/stdout"
                ;;
            *)
                ;;
        esac
        shift
    done
}
main() {
    get_args "$@"
    export_comments
    make_header > "${OUTFILE}"
    useful_docs >> "${OUTFILE}"
    make_footer >> "${OUTFILE}"
}

main "$@" || exit 1
