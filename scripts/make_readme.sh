#!/usr/bin/env bash
############################################################
# Script to generate a README with a table of contents.
# The main function is `toc` where we make a table of 
# contents, and otherwise we have the `make_header` and you
# can similarly add a `make_footer` or other sections as you
# please.
# You'll get best results by using here files (`cat << EOF`)
# and using variables
#
# Use at your own risk
#
# If you have a better way to format that looks nice both in
# terminal and on GitHub please let me know!
#
# Author: Steven Walton
# Contact: scripts@walton.mozmail.com
# License: MIT
############################################################
VERSION=0.1

TOC_PATH="${TOC_PATH:-.}"
README_DIR="${README_DIR:-.}"
README_NAME="${README_NAME:-README.md}"
#
declare -i STD_OUT=0
declare -i TOC_ONLY=0

# Static message that defines your README
# Table of contents will be placed where $(make_toc) appears
# May use other variables or functions at will
readme_content() {
    cat << README_EOF
$(make_header)
------------------------------------------------------------
$(make_toc)
------------------------------------------------------------
$(make_footer)
README_EOF
}

# Message above TOC
make_header() {
    cat << HEADER
# Some message
-------------------------
The project is organized as follows

<sub><sup>Note: In vim press \`gf\` (goto-file) to go to selected file and <C-o> or <C-^> to go back (:e#)</sub></sup>
HEADER
}

# Message past TOC
make_footer() {
    cat << FOOTER
<sub><sup>NOTE: This README is autogenerated. Edit [make_readme](make_readme.sh) instead</sup></sub>

<sub><sup>Generator script created by Steven Walton Version: ${VERSION}</sup></sub>
FOOTER
}

# Uses git ls-tree to make a table of contents in markdown style
# ----------------------------------------------------------
# Inspired by jonavon: https://stackoverflow.com/a/61565622
# Gets the git directory tree and makes a markdown table
# of contents
# ----------------------------------------------------------
make_toc() {
    # The dumb tails are to make it work with OSX.
    # We expect first to be ".gitignore", this is resolved with `tail +2`
    # Then the end of the list should be `README.md\rmake_readme.sh`, so we
    # reverse (`tail -r`), remove the first 2 items (`tail +3`), then put back
    # in the right order (`tail -r` again)
    git ls-tree \
        --full-name \
        --name-only \
        -t \
        -r HEAD \
        "$TOC_PATH" \
        | tail +2 \
        | tail -r \
        | tail +3 \
        | tail -r \
        | sed -e '/^\..*/d' \
        | sed -e "s/\([^-][^\/]*\/\)/   |\1/g" \
        -e "s/|\([^ ].*\/\(.*\)\)/|--- \[\2\]\(\1\)/" \
        | sed -e "s/^\([^ ].*\)/\[\1\]\(\1\)/" \
        | sed -e "s/\(.*\)/- \1/"
        
}

usage() {
    cat << USAGE
Makes a table of contents and autogenerates a README file based
on \`git ls-tree\`.
WARNING: this will overwrite your current README file. 

[USAGE]
    make_readme [OPTIONS]

[OPTIONS]
    -h, --help
        Print this message
    -d, --directory
        Directory of the tree's root. Where TOC starts (default '.')
    -t, --target
        Target for README location. Where it gets placed (default '.')
    --readme-name
        Name of the README file (default 'README.md')
    --stdout
        Write to stdout instead of a file (default off)
    --toc-only
        Only generate the table of contents (default off)

[EXAMPLES]
    ./make_readme.sh -d foo -t bar --toc-only
        Makes a table of content (only) starting with directory 'foo' and
        places this in the file 'bar/README.md'
    ./make_readme.sh --toc-only --stdout
        Prints the table of contents (great for testing)
 
USAGE
}

get_args() {
    while [[ $# -gt 0 ]];
    do
        case $1 in
            -h | --help)
                usage
                exit 0
                ;;
            -d | --directory)
                shift
                TOC_PATH="$1"
                ;;
            -t | --target)
                shift
                README_DIR="$1"
                ;;
            --readme-name)
                shift
                README_NAME="$1"
                ;;
            --stdout)
                STD_OUT=1
                ;;
            --toc-only)
                TOC_ONLY=1
                ;;
            *)
                ;;
        esac
        shift
    done
}

main() {
    get_args "$@"
    
    if [[ $TOC_ONLY -eq 1 ]];
    then
        output="$(make_toc)"
    else
        output="$(readme_content)"
    fi
    
    if [[ $STD_OUT -eq 1 ]];
    then
        echo "$output"
    else
        #echo "$output" > "${README_DIR%/}/README.md"
        echo "Would write to file ${README_DIR%/}/${README_NAME}"
        echo "$output"
    fi
    #make_header > "${README_DIR%/}/README.md"
}

main "$@" || exit 1
